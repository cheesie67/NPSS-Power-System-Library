
class ComplexNumber extends VariableContainer {
	
	description = "Complex Number Object";
	background = "Author: Jesus Garcia (jesus2.garcia@ge.com)";
	
	real _r, _j;
	
	string IOstatus {
		value ="unset";  units = "none";
		description = "Display variable to mimic variable's IOstatus";
	}
	
	int lock {
		value = 0;
		description = "determmines if value can be set (used to control how port values are set)";	
	}
	
	string get_units() {  
		return _units;
	}
	
	void set_units(string userValue)   { 
		_units = userValue; 
		_r.units    = userValue;
		_j.units    = userValue;
		abs.units  = userValue;
		_abs.units = userValue;
	}
	
	FunctVariable units {
		units = "none"; 
		IOstatus = "input"; 
		description = "Units of the complex number";
		getFunction = "get_units"; setFunction = "set_units";
	}
	
	string _units    = "";
	
	FunctVariable rPeak {
	    IOstatus = "unset";  units = "none";
		description = "Real part of the complex plane";
		getFunction = "get_rPeak";
	}
	real get_rPeak(){
		return _r*sqrt(2.);	
	}
		
	
	FunctVariable jPeak {
	    IOstatus = "unset";  units = "none";
		description = "Real part of the complex plane";
		getFunction = "get_jPeak";
	}
	real get_jPeak(){
		return _j*sqrt(2.);	
	}

	
	FunctVariable r {
	    IOstatus = "unset";  units = "none";
		description = "Real part of the complex plane";
		getFunction = "get_r";
	}
	real get_r(){
		return _r;	
	}
	
	FunctVariable j {
	    IOstatus = "unset";  
	    units = "none";
		description = "Imaginary part of the complex plane";
		getFunction = "get_j";
	}
	real get_j(){
		return _j;	
	}
   	
	FunctVariable peak{
		units = "none"; 
		IOstatus = "unset"; 
		description = "Magnitude of the complex plane polar representation";
		getFunction = "get_mag"; 
	}
	real get_peak() { 
		return sqrt(_r*_r+_j*_j)*sqrt(2.); 		
	}

	
	FunctVariable mag {
		units = "none"; 
		IOstatus = "unset"; 
		description = "rms value for electric purposes"; 
		getFunction = "get_mag"; 
	}
	
	real get_mag() { 
	    return sqrt(_r*_r+_j*_j); 	
	}
	
	FunctVariable phase {
		units = "rad"; 
		IOstatus = "unset"; 
		description = "Phase Angle value of the complex plane polar representation";
		getFunction = "get_phase"; 
	}
	real get_phase() { 
		_phase = atan(j/r);
		if ( r < 0 ) { _phase = _phase + PI; }
		if ( _phase > PI )  { _phase = _phase - 2*PI; }
		if ( _phase < -PI ) { _phase = _phase + 2*PI; }
		if (j == 0 && r ==0 ) {_phase = 0 ;}
		return _phase;
	}
	real _phase;
	
    FunctVariable phaseDeg {
    	units = "deg"; 
    	IOstatus = "unset"; 
    	description = "Phase Angle (Deg) value of the polar representation of the complex plane";
    	getFunction = "get_phaseDeg"; 
    }
    real get_phaseDeg() { 
		return get_phase()*180./PI;
	}
    
    void scale( real scale ){
    	_r = _r*scale;
    	_j = _j*scale;
    }
    
    void setrjPeak( real r_in, real j_in ){
    	if ( lock == 0 ){
    		_r = r_in/sqrt(2.);
    		_j = j_in/sqrt(2.);
    	}else{
    		cerr << "No, no, no\n";		
    	}
    }
    
    
    void setrj( real r_in, real j_in ){
    	if ( lock == 0 ){
    		_r = r_in;
    		_j = j_in;
    	}else{
    		cerr << "No, no, no\n";		
    	}
    }
    
	// change to mag
    void setMagPhase( real mag, real phase  ){
    	if ( lock == 0 ){
    		_r = mag*cos( phase ); 
    		_j = mag*sin( phase );
    	} else{
    		cerr << "No, no, no\n";	   		
    	}
    }
    
    // change to mag
    void setMagPhaseDeg( real mag, real phase  ){
    	if ( lock == 0 ){
    		_r = mag*cos( phase*PI/180. ); 
    		_j = mag*sin( phase*PI/180. );
    	} else{
    		cerr << "No, no, no\n";	   		
    	}
    }
    
    
    void copy( string cNumName ) {
    	_r = cNumName->_r;
    	_j = cNumName->_j;
    }
    
    
    void plus( string cNumName ) {
    	if ( lock == 0 ){
    		_r = _r + cNumName->_r;
    		_j = _j + cNumName->_j;
    	}else{
    		cerr << "No, no, no\n";	   		
    	}
    }
    void minus( string cNumName ) {
    	if ( lock == 0 ){
    		_r = _r - cNumName->_r;
    		_j = _j - cNumName->_j;
    	}else{
    		cerr << "No, no, no\n";	   		
    	}
    }
    
    void times( string cNumName ) {
    	if ( lock == 0 ){
    		real rLoc, jLoc, jExt, rExt;
    		rLoc = r; 
    		jLoc = j; 
    		rExt = cNumName->r;
    		jExt = cNumName->j;
    		_r = rLoc*rExt - jLoc*jExt;
    		_j = jLoc*rExt + rLoc*jExt;
    		
    	}else{
    		cerr << "No, no, no\n";	   		
    	}
    }
    
    
   
    
    void div( string cNumName ) {
    	if ( lock == 0 ){
    		real denom;
    		real rLoc, jLoc, jExt, rExt;
    		rLoc = _r; 
    		rExt = cNumName->r;
    		jLoc = _j; 
    		jExt = cNumName->j;
    		denom = rExt**2 + jExt**2;
    		_r = (rLoc*rExt + jLoc*jExt)/denom;
    		_j = (jLoc*rExt - rLoc*jExt)/denom;
    	}
    }
    void conjugate() {
    	if ( lock == 0 ){
    		_j *= -1;
    	}else{
    		cerr << "No, no, no\n";	   		
    	}
    }
    
}
