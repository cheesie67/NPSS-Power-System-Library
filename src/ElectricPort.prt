
#include "ComplexNumber.int"

class ElectricPort extends Subelement {
	
	//------------------------------------------------------------
	//     ******* DOCUMENTATION *******
	//------------------------------------------------------------
	title = "";
	description = isA() + " Electric Port";
	usageNotes = isA() + "- NOTE TO USERS: This file....";
	background = "";   
	
	//-------------------------------------------------
	// Electric port parameters
	//-------------------------------------------------
	ComplexNumber V{
		lock = 1;	
	}
	ComplexNumber I{
		lock = 1;	
	}
	ComplexNumber S{
		lock = 1;
    }
    
    FunctVariable Vdc {
        getFunction = "getVdc";
        hide( 2 );
    }
    
    real getVdc() {
    	return V.r;	
    }
    
    FunctVariable Idc {
        getFunction = "getIdc";
        hide( 2 );
    }   
    real getIdc() {
    	return I.r;	
    }
    
    FunctVariable Pdc {
        getFunction = "getPdc";
        hide( 2 );
    }   
    real getPdc() {
    	return S.r;	
    }
    
    Pdc.hide( 0 );
    Idc.hide( 0 );
    Vdc.hide( 0 );
    V.hide( 2 );
    S.hide( 2 );
    I.hide( 2 );
    
	socketRequired = 0;
	
	Option ElectricPowerType {
		allowedValues = { "AC1", "DC", "AC3" };
		description = "Electric Power Type (DC, AC1, AC3)";
		//IOstatus = 'INPUT';
		trigger = 1;
		rewritableValues = FALSE;
	}
	
	real frequency{
		value=0.; 
		IOstatus="input"; //units=kW;
		description = "Frequency";
	}
	
	real PF{
		value=0;
		description = "Ratio of real to apparent power";
	}
	
	string refport{
		description = "port used to copy from";	
	}
	
	
	ComplexNumber VLN{
		hide ( 2. );
	}
	
	//------------------------------------------------------------
	// ******* VARIABLE CHANGED METHODOLOGY *******
	//------------------------------------------------------------
	void variableChanged( string name, any oldVal ) {
		
		if ( name =="ElectricPowerType" ) {
			// change variable IO status depending switchDes status
			if ( ElectricPowerType == "DC" ) {
				Pdc.hide( 0 );
				Idc.hide( 0 );
				Vdc.hide( 0 );
				V.hide( 2 );
				VLN.hide( 2 );
				S.hide( 2 );
				I.hide( 2 );
				frequency=0;
			} 
			else if ( ElectricPowerType == "AC1" ) {
				Pdc.hide( 2 );
				Idc.hide( 2 );
				Vdc.hide( 2 );
				VLN.hide( 2 );
				V.hide( 0 );
				S.hide( 0 );
				I.hide( 0 );		
			} 
			else if ( ElectricPowerType == "AC3" ) {
				Pdc.hide( 2 );
				Idc.hide( 2 );
				Vdc.hide( 2 );
				VLN.hide( 0 );
				V.hide( 0 );
				S.hide( 0 );
				I.hide( 0 );		
			} 
		} 
	} 
	
	
	//------------------------------------------------------
	// copy the port information
	//------------------------------------------------------
	void copyport() {
		V.copy( refport+".V" );
	    VLN.copy( refport+".VLN" );
		I.copy( refport+".I" );
		S.copy( refport+".S" );
		
		frequency=refport->frequency;
		if (refport==""){
			cerr<<"Hey I need a refport!!!"<<endl;
		}		
	}
	
	
	
	//------------------------------------------------------
	// push the port information
	//------------------------------------------------------
	void pushport() {
		refport->copyport();
		if (refport==""){
			cerr<<"Hey I need a refport!!!"<<endl;
		}		
	}
	
	//-----------------------------------------------------------
	// set the port conditions based on current, voltage, 
	// and angles in degrees
	//-----------------------------------------------------------
	void setIVphaseDeg( real Imag, real Iangle, real Vmag, real Vangle ){
		setIV( Imag*cos(Iangle*PI/180.), Imag*sin(Iangle*PI/180.),
			Vmag*cos(Vangle*PI/180.), Vmag*sin(Vangle*PI/180.) );
	}
	
	//-----------------------------------------------------------
	// set the port conditions based on current, voltage, and 
	// angles in radians
	//-----------------------------------------------------------
	void setIVphaseRad( real Imag, real Iangle, real Vmag, real Vangle ){
		setIV( Imag*cos(Iangle), Imag*sin(Iangle),
			Vmag*cos(Vangle), Vmag*sin(Vangle) );
	}
	
	
	//-----------------------------------------------------------
	// set the port conditions based on complex current and voltage
	//-----------------------------------------------------------
	void setIV( real Ir, real Ij, real Vr, real Vj ){
		
		//--------------------------------------------------------------------
		// unlock the parameters so they can be set
		//--------------------------------------------------------------------
		V.lock = 0;
		VLN.lock = 0;
		I.lock = 0;
		S.lock = 0;
		
		// set the current and voltage
		V.setrj( Vr, Vj );
		I.setrj( Ir, Ij );
		
		//--------------------------------------------------------------------
		// check to see if we are in DC power mode and passing imaginary info
		//--------------------------------------------------------------------
		if (ElectricPowerType == "DC" ){	
			if ( Vj!=0. || Ij!=0. ){
				cerr << "you are running a DC circuit with imaginary comps\n";	
			}
		}
		

		//-------------------------------------------------------------------
		// determine the power
		//--------------------------------------------------------------------
		if (ElectricPowerType == "DC" || ElectricPowerType=="AC1")
		{
			S.copy( "I" );
			S.conjugate();
			S.times( "V" );
			S.scale( 1./1000. );
		}
		
		if (ElectricPowerType == "AC3"){
		
			
			VLN.copy( "V" );
			VLN.setMagPhase( V.mag, V.phase-30.*PI/180. );
			VLN.scale( 1./sqrt(3.) );
			S.copy( "I" );
			S.conjugate();
			S.times( "VLN" );
			S.scale( 3. );
		}
		
		PF = S.r/S.mag;
		
		//------------------------------------------------------------------
		// lock the numbers again
		// only way to set the values should be through this function
		//------------------------------------------------------------------
		V.lock = 1;
		VLN.lock = 1;
		I.lock = 1;
		S.lock = 1;
	
		pushport();
		
	}
	
}



class ElectricOutputPort extends ElectricPort;

class ElectricInputPort extends ElectricPort;