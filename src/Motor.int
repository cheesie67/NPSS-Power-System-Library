// ****************************************************************************
// * NASA Glenn Research Center
// * 21000 Brookpark Rd
// * Cleveland, OH 44135
// * Jeffrey Csank, David Sadey, Tom Lavelle
// * May 1, 2018
// ****************************************************************************
// Revisions:
//  
// ****************************************************************************

//#include <InterpIncludes.ncp>
class Motor extends Element {
	
	//------------------------------------------------------------
	//     ******* DOCUMENTATION *******
	//------------------------------------------------------------
	
	title = "";
	description = isA() + " Determines motor power";
	usageNotes = isA() + "- NOTE TO USERS: This file....";
	background = "";
	
	//------------------------------------------------------------
	//     ******* SETUP VARIABLES ********
	//------------------------------------------------------------
	real Speed{
		value=0; IOstatus="input"; //units=rpm;
		description = "Propulsor Speed";
	}
	
	real Torque{
		value=0; IOstatus="input"; //units=rpm;
		description = "Propulsor Torque";
	}
	
	real Mass {
		value=0; IOstatus="output"; units="kg";
		description = "Mass output of the motor";
	}	
	
	real Vdes_LL{
		value=0; IOstatus="input"; //units=rpm;
		description = "Propulsor Torque";
	}
	
	real Eff{
		value=0.96; IOstatus="input"; //units=None;
		description = "Projected Motor Efficiency";
	}
	
	real SpecificPower {
		value = 13; IOstatus="input"; //units=;
		description = "Power to Weight ratio for the motor";
	}
	
	real motorResistance {
		value = 0; IOstatus="output";; units= "W";
		description = "Resistance of the motor based on losses";
	} 
	
	real Loss_r {
		value = 0; //IOstatus=OUTPUT; units="W";
		description = "Motor Loss";
	}
	
	real Loss_j {
		value = 0; //IOstatus=OUTPUT; units="W";
		description = "Motor Loss";
	}
	
	real powerfactor {
		value = 1; //IOstatus=OUTPUT; units="W";
		description = "Motor Loss";
	}
	
	real CurrentAngle_Demand {
		value = 0; //IOstatus=OUTPUT; units="W";
		description = "Current Angle for the motor";
	}
	
	real frequency;
	real Vreal, Vimag;
	
	//------------------------------------------------------------
	//  ******  ADD SOLVER INDEPENDENTS & DEPENDENT  ******
	//------------------------------------------------------------
	Independent ind_Vreal { 
		varName = "Vreal"; 
		autoSetup = TRUE;
		indepRef = "100";
		
		description = "Varies the real component of the motor voltage";
	}
	
	Independent ind_Vimag { 
		varName = "Vimag"; 
		autoSetup = TRUE;
		indepRef = "100";
		description = "Varies the imaginary component of the motor voltage";
	}
	
	//------------------------------------------------------------
	// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
	//------------------------------------------------------------
	ShaftOutputPort Sh_O {
		description = "Mechanical connection to the shaft";
	}
	
	ElectricPort EP_I {
		description = "Electric Port";
	}
	
	//------------------------------------------------------------
	//   ******* PERFORM ENGINEERING CALCULATIONS *******
	//------------------------------------------------------------
	Option switchDes {
		allowedValues = { "DESIGN", "OFFDESIGN" } ;
		description = "Determines if the element is in design or off-design mode";
		rewritableValues = FALSE;
		trigger =FALSE;
	}
	
	
	void calculate() {
		
		Speed=Sh_O.Nmech;	
		//EP_I.copyport();
		
		
		real RealPower=0;
		
		if ( switchDes == "DESIGN" ){
		/*****************************
		On-Design
		*****************************/
		// compute power to the load
		RealPower = EP_I.S.r * Eff;
		
		// Compute mass based on assumed specific power.
		Mass=RealPower / SpecificPower;
		
		// computer losses
		Loss_r=EP_I.S.r * (1.0 / Eff - 1.0);
		Loss_j=sqrt((EP_I.S.r / powerfactor)**2 - EP_I.S.r**2);
		
		// determine resistance 
		motorResistance =  Loss_r / 3 / EP_I.I.mag**2;
		}
		
		else{	
			//*****************************
			// Off-Design
			//*****************************
			// Power to the load (supply - loss)
			RealPower = EP_I.S.r - EP_I.I.mag**2 * motorResistance;
			
			// Calculate loss
			Loss_r = 3 * EP_I.I.mag**2 * motorResistance;
			Loss_j=sqrt((EP_I.S.r / powerfactor)**2 - EP_I.S.r**2);
		}
		
		CurrentAngle_Demand = EP_I.V.phaseDeg - acos(powerfactor) * 180/PI;
		
		
		Torque = RealPower*( C_HP_PER_RPMtoFT_LBF * (1./ 0.745699872) / Sh_O.Nmech );
		
		Sh_O.trq=Torque;
	}
	void prePass(){
		
		EP_I.setIVRMS( 0., 0. , Vreal,  Vimag );
		EP_I.frequency = frequency;
		
	}
	
	
}

